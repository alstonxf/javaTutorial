<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itheima.dao.IUserDao">
    <!--配置查询所有-->
    <select id="findAll" resultType="com.itheima.domain.User">
        select * from user;
    </select>

    <!--保存用户-->
    <insert id="saveUser" parameterType="com.itheima.domain.User">
        <!--配置插入操作之后，获取插入数据的id-->
--         keyProperty：代表要返回的值名称 order：取值为 AFTER 代表插入后的行为 resultType：代表返回值的类型
--         如果没有对于获取新增用户的 id 的需求，那么删除即可。
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username, address, sex, birthday) values(#{username}, #{address}, #{sex}, #{birthday});
    </insert>

<!--    经过typeAliase 标签指定别名的配置，那么在用户映射配置文件中，用到全限定类名的地方可以用 **别名** 代替， 如：-->
    <!--更新用户-->
    <update id="updateUser" parameterType="user">
        update user set username=#{username}, address=#{address}, sex=#{sex}, birthday=#{birthday} where id=#{id}
    </update>

    <!--删除用户-->
    <!--基本类型或者基本类型包装类 并且 占位符只有一个参数时，可以随意写 -->
    <!--如下文中占位符参数是 uid，也可以是其他任意字符-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{uid}
    </delete>

    <!--根据id查询用户-->
    <select id="findById" parameterType="INT" resultType="com.itheima.domain.User">
        select * from user where id = #{uid}
    </select>

    <!--根据名称模糊查询-->
    <select id="findByName" parameterType="String" resultType="com.itheima.domain.User">
        select * from user where username like #{name}
    </select>

    <!--分页查询-->
    <select id="findByPage" resultType="com.itheima.domain.User">
        select * from user limit #{start}, #{rows}
    </select>

    <!--查询总用户数-->
    <select id="findTotal" resultType="int">
        select count(*) from user;
    </select>

    <!--根据queryvo的条件查询用户-->
    <select id="findUserByVo" parameterType="com.itheima.domain.QueryVo" resultType="com.itheima.domain.User">
        select * from user where username like #{user.username};
    </select>

    <select id="getBeanList" parameterType="hashmap" resultType="com.itheima.domain.User">
        select * from user where id=#{MapKey1} and username = #{MapKey2};
    </select>

    <!--根据 List 集合中的id集合实现查询用户列表-->
    <select id="findByList" resultType="com.itheima.domain.User" parameterType="java.util.List">
        select * from user
        <where>
            <if test="list!=null and list.size()>0">
                <foreach collection="list" open="and id in (" close=")" item="sid" separator=",">
                    #{sid}
                </foreach>
            </if>
        </where>
    </select>

    <!--根据条件查询，if 标签的使用-->
    <select id="findUserIfLabelByCondition" resultType="user" parameterType="user">
        select * from user where 1 = 1
        <if test="id != null">
            and id = #{id}
        </if>
        <if test="username!= null">
            and username = #{sex}
        </if>
    </select>

    <!--根据条件查询，where 标签的使用-->
    <select id="findUserWhereLabelByCondition" resultType="user" parameterType="user">
        select * from user
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="username!= null">
                and username = #{sex}
            </if>
        </where>
    </select>


    <!--根据 List 实现查询用户列表-->
    <select id="findUserInIdsByList" resultType="user" parameterType="list">
        select * from user
        <where>
            <if test="list!=null and list.size()>0">
                <foreach collection="list" open="and id in (" close=")" item="sid" separator=",">
                    #{sid}
                </foreach>
            </if>
        </where>
    </select>

    <!--根据queryvo中的id集合实现查询用户列表-->
    <select id="findUserInIdsByQueryVo" resultType="user" parameterType="queryvo">
        select * from user
        <where>
            <if test="ids != null">
                <foreach collection="ids" open="and id in (" close=")" item="sid" separator=",">
                    #{sid}
                </foreach>
            </if>
        </where>
    </select>

    <select id="findUserByBindLabel" parameterType="user" resultType="user">
        <!-- bind 中的 username 是 user 的属性名-->
        <bind name="nameLike" value="'%' + username + '%'"/>
        select * from user where username like #{nameLike}
    </select>

<!--    SQL语句如下：-->
<!--    update user set username=‘xxx’ , sex=‘xx’ where id=‘x’-->
<!--    <font color=red>set标记已经自动帮助我们把最后一个逗号给去掉了。</font>-->
    <update id="updateUserBySetLabel" parameterType="user">
        update user
        <set>
            <if test="username != null">
                username = #{username},
            </if>

            <if test="sex != null">
                sex = #{sex},
            </if>
        </set>
        where id = #{id}
    </update>

<!--    ## 六、动态 SQL 的 trim 标签-->
<!--      mybatis 的 trim 标签一般用于去除 sql 语句中多余的 and 关键字，逗号，或者给 sql 语句前拼接 “where“、“set“ 以及“values (“ 等前缀，或者添加“)“等后缀，可用于选择性插入、更新、删除或者条件查询等操作。-->
<!--    | 属性            | 描述                                                         |-->
<!--    | :&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; | :-&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; |-->
<!--    | prefix          | 给sql语句拼接的前缀                                          |-->
<!--    | suffix          | 给sql语句拼接的后缀                                          |-->
<!--    | prefixOverrides | 去除sql语句前面的关键字或者字符，该关键字或者字符由prefixOverrides属性指定，假设该属性指定为"AND"，当sql语句的开头为"AND"，trim标签将会去除该"AND" |-->
<!--    | suffixOverrides | 去除sql语句后面的关键字或者字符，该关键字或者字符由suffixOverrides属性指定 |-->
    <select id="findUserByTrimLabel" parameterType="user" resultType="user">
        select * from user
        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="username != null">
                and username = #{username}
            </if>
            <if test="sex != null">
                and sex = #{sex}
            </if>
        </trim>
    </select>

<!--    ## Mybatis 中简化编写的 SQL 片段-->
<!--    Sql 标签中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的。-->
<!--    **定义代码片段：**-->
    <!-- 抽取重复的语句代码片段 -->
    <sql id="defaultUser">
        select * from user
    </sql>

<!--    **引用代码片段：**-->
    <!--配置查询所有-->
    <select id="findAll2" resultType="user">
        <include refid="defaultUser"></include>/*引用sql标签中的sql语句,refid为sql的id*/
    </select>

    <!--根据id查询用户-->
    <select id="findById2" parameterType="INT" resultType="user">
        <include refid="defaultUser"></include> where id = #{id}
    </select>



</mapper>

