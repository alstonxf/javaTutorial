<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把对象的创建交给spring来管理-->
<!--    ## 一、创建bean的三种方式-->
<!--    ### 1.1 使用默认构造函数创建。-->
<!--    在spring的配置文件中使用bean标签，配以id和class属性之后，**且没有其他属性和标签时**。采用的就是 **默认构造函数** 创建bean对象，此时如果类中没有默认构造函数，则对象 **无法创建**。-->
    <bean id="accountDao" class="com.itheima.dao.impl.AccountDaoImpl"></bean>
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" ></bean>

<!--    ### 1.2 使用普通工厂中的方法创建对象-->
<!--    这里我们模拟，调用jar包中的工厂，并用工厂里的方法来创建 bean 对象，并存入spring 容器-->
    <bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"></bean>
    <bean id="accountService2" factory-bean="instanceFactory" factory-method="getAccountService"></bean>

<!--    ### 1.3 使用工厂中的静态方法创建对象-->
<!--    使用某个类中的静态方法创建对象，并存入spring容器中-->
    <bean id="accountService3" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>

<!--    三、bean 对象的生命周期-->
<!--    bean标签的**scope属性**：-->
<!--    - 作用：<mark>用于指定bean的作用范围</mark>-->
<!--    - 取值：常用是单例和多例-->

<!--    1. **singleton : 单例（默认值）**-->
<!--    2. **prototype ：多例**-->

<!--    request ：作用域web应用的请求范围-->
<!--    session ：作用域web应用的会画范围-->
<!--    global-session ：作用域集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session-->
    <bean id="accountService4" class="com.itheima.service.impl.AccountServiceImpl" scope="singleton"
          init-method="init" destroy-method="destroy"></bean>
</beans>

