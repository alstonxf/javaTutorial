<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">


<!--    <bean id="userDao" class="com.SpringTest.SpringDemo3.remli.dao.impl.UserDaoImpl" scope="prototype"></bean>-->
<!--    4、bean实例化：无参、工厂静态、工厂实例-->
    <!--    1.无参构造方法实例化：默认-->
    <!--找无参构造方法-->
    <bean id="userDao" class="SpringTest.SpringDemo3.remli.dao.impl.UserDaoImpl" init-method="init" destroy-method="destroy" scope="prototype"></bean>

    <!--    2.工厂静态方法实例化：直接调用方法-->
    <!--找全包名对应内部指定的方法、去返回对应的对象-->
    <bean id="userDao1" class="SpringTest.SpringDemo3.remli.factory.StaticFactory" scope="prototype" factory-method="getUserDao"></bean>

    <!--    3.工厂实例方法实例化：先有工厂对象再调方法-->
    <!--先创建工厂对象-->
    <bean id="factory" class="SpringTest.SpringDemo3.remli.factory.DynamicFactory" scope="prototype" ></bean>
    <!--从容器当中工厂对象内部的方法获取指定返回的对象-->
    <bean id="userDao2"  factory-bean="factory" factory-method="getUserDao"></bean>



<!--    5、依赖注入DI：注入类型：对象、普通数据、集合数据-->
<!--        1.构造方法注入：有参构造-->
<!--    <bean id="testDataSource" name="testDataSource" class="SpringTest.SpringDemo3.remli.dataSource.testDataSource"  scope="prototype"></bean>-->

<!--    <bean id="userService5"  class="SpringTest.SpringDemo3.remli.service.impl.UserServiceImpl">-->
<!--        &lt;!&ndash;参数名&ndash;&gt;            &lt;!&ndash;&ndash;&gt;-->
<!--        <constructor-arg name="userDao" ref="userDao" ></constructor-arg>-->
<!--        <constructor-arg name="age" value="10" ></constructor-arg>-->
<!--    </bean>-->


    <!--    2.set方法注入：-->
    <!--找无参构造方法-->
<!--    <bean id="userDao"  class="com.SpringTest.SpringDemo3.remli.dao.impl.UserDaoImpl" init-method="init" destroy-method="destroy" scope="prototype"></bean>-->
    <!--set依赖注入-->
<!--    <bean id="userService"  class="com.SpringTest.SpringDemo3.remli.service.impl.UserServiceImpl">-->
<!--        <property name="userDao" ref="userDao"></property>-->
<!--    </bean>-->


<!--    3.p命名空间注入：(本质set)-->
<!--    1引入p命名空间：-->
<!--    xmlns:p="http://www.springframework.org/schema/p"-->
<!--    2修改注入方式：-->
<!--    <bean id="userService"  class="com.SpringTest.SpringDemo3.remli.service.impl.UserServiceImpl" p:userDao-ref="userDao" />-->

<!--    6、依赖注入类型：引用数据(对象)、普通数据、集合数据-->
    <!--    1.普通数据-->

<!--    <bean id="userDao11"  class="SpringTest.SpringDemo3.remli.dao.impl.UserDaoImpl" >-->
<!--        &lt;!&ndash;属性注入&ndash;&gt;-->
<!--        <property name="username" value="注意空格"/>-->
<!--        <property name="age" value="2021825"/>-->
<!--    </bean>-->
<!--    &lt;!&ndash;    2.引用数据&ndash;&gt;-->
<!--    &lt;!&ndash;    3.集合数据&ndash;&gt;-->
<!--    <bean id="userDao222"  class="SpringTest.SpringDemo3.remli.dao.impl.UserDaoImpl" >-->
<!--        &lt;!&ndash;属性注入&ndash;&gt;-->
<!--        <property name="strList">-->
<!--            <list>-->
<!--                <value>任</value>-->
<!--                <value>明</value>-->
<!--                <value>任</value>-->
<!--            </list>-->
<!--        </property>-->
<!--        <property name="userMap">-->
<!--            <map>&lt;!&ndash;key value&ndash;&gt;-->
<!--                <entry key="key1" value-ref="user11"> </entry>-->
<!--                <entry key="key2" value-ref="user22"> </entry>-->
<!--            </map>-->
<!--        </property>-->
<!--        <property name="properties">-->
<!--            <props>-->
<!--                <prop key="1">111</prop>-->
<!--                <prop key="2">1112</prop>-->
<!--                <prop key="3">1113</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--    </bean>-->

<!--    <bean id="user113" class="SpringTest.SpringDemo3.remli.domain.User">-->
<!--        <property name="name" value="我是"></property>-->
<!--        <property name="addr" value="中国"></property>-->
<!--    </bean>-->
<!--    <bean id="user22" class="SpringTest.SpringDemo3.remli.domain.User">-->
<!--        <property name="name" value="我是1"></property>-->
<!--        <property name="addr" value="中国1"></property>-->
<!--    </bean>-->

<!--    &lt;!&ndash;    三、引入其他配置文件（分模块开发）&ndash;&gt;-->
<!--    &lt;!&ndash;    实际开发中，Spring的配置内容非常多，这导致Spring配置很繁杂，使用可以拆分到其它配置文件当&ndash;&gt;-->
<!--    &lt;!&ndash;    中，而且Spring主配置文件通过import标签加载&ndash;&gt;-->

<!--    &lt;!&ndash;    1、< import >标签&ndash;&gt;-->
<!--    &lt;!&ndash;主配置文件——引入分模块文件&ndash;&gt;-->
<!--    <import resource="applicationContext-user.xml"></import>-->

<!--    &lt;!&ndash;    四、Spring的重点配置&ndash;&gt;-->
<!--    &lt;!&ndash;    1、< property >标签：属性注入、setter()&ndash;&gt;-->
<!--    &lt;!&ndash;    property：通过setter对应的方法注入。&ndash;&gt;-->
<!--    &lt;!&ndash;    1. name属性：属性名称&ndash;&gt;-->
<!--    &lt;!&ndash;    1. value属性：注入的普通属性值&ndash;&gt;-->
<!--    &lt;!&ndash;    1. ref属性：注入的对象引用值&ndash;&gt;-->
<!--    &lt;!&ndash;    1. < set >标签：集合——引用ref&ndash;&gt;-->
<!--    &lt;!&ndash; 给set注入值 不能有相同的对象 &ndash;&gt;-->


<!--    <bean id="user112" class="SpringTest.SpringDemo3.remli.dao.impl.UserDaoImpl">-->
<!--        <property name="empSets">-->
<!--            <set>-->
<!--                &lt;!&ndash;                <ref bean="emp1" />&ndash;&gt;-->
<!--                &lt;!&ndash;                <ref bean="emp2"/>&ndash;&gt;-->
<!--                <value>人</value>-->
<!--                <value>民</value>-->
<!--                <value>人</value>-->
<!--            </set>-->
<!--        </property>-->

<!--        &lt;!&ndash;    1. < list >标签：集合——引用ref&ndash;&gt;-->
<!--        &lt;!&ndash; 给list注入值 可以有相同的多个对象 &ndash;&gt;-->

<!--        <property name="strList">-->
<!--            <list>-->
<!--                <value>人</value>-->
<!--                <value>民</value>-->
<!--                <value>人</value>-->
<!--            </list>-->
<!--        </property>-->

<!--        &lt;!&ndash;    1. < map >标签：集合——键值对&ndash;&gt;-->
<!--        &lt;!&ndash; 给map注入值 只要map中的key值不一样就可以装配value &ndash;&gt;-->

<!--        <property name="userMap">-->
<!--            <map>&lt;!&ndash;key value&ndash;&gt;-->
<!--                <entry key="key1" value-ref="user11"> </entry>-->
<!--                <entry key="key2" value-ref="user22"> </entry>-->
<!--            </map>-->
<!--        </property>-->


<!--        &lt;!&ndash;    1. < properties >标签：与map类似——键值对&ndash;&gt;-->
<!--        <property name="properties">-->
<!--            <props>-->
<!--                <prop key="1">111</prop>-->
<!--                <prop key="2">1112</prop>-->
<!--                <prop key="3">1113</prop>-->
<!--            </props>-->
<!--        </property>-->

<!--    </bean>-->

<!--    &lt;!&ndash;    2、< constructor-arg >标签：指定构造函数的参数注入&ndash;&gt;-->
<!--    &lt;!&ndash;    constructor-arg：通过构造函数注入。&ndash;&gt;-->

<!--    &lt;!&ndash;找无参构造方法&ndash;&gt;-->
<!--    <bean id="userDao1015"  class="SpringTest.SpringDemo3.remli.dao.impl.UserDaoImpl">-->
<!--    </bean>-->
<!--    &lt;!&ndash;    <bean id="userService201"  class="SpringTest.SpringDemo3.remli.service.impl.UserServiceImpl">&ndash;&gt;-->
<!--    &lt;!&ndash;        &lt;!&ndash;参数名&ndash;&gt;            &lt;!&ndash;&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;        <constructor-arg name="userDao" ref="userDao"></constructor-arg>&ndash;&gt;-->
<!--    &lt;!&ndash;    </bean>&ndash;&gt;-->

<!--    <bean id="userDao15"  class="SpringTest.SpringDemo3.remli.dao.impl.UserDaoImpl">-->
<!--        &lt;!&ndash;    constructor-arg属性通过指定type 类型来调用对应的构造函数，&ndash;&gt;-->

<!--        <constructor-arg name="id" value="1"/>-->
<!--        <constructor-arg name="name" value="student"/>-->
<!--        <constructor-arg name="dream">-->
<!--            <list>-->
<!--                <value>soldier</value>-->
<!--                <value>scientist</value>-->
<!--                <value>pilot</value>-->
<!--            </list>-->
<!--        </constructor-arg>-->

<!--        <constructor-arg name="score">-->
<!--            <map>-->
<!--                <entry key="math" value="90"/>-->
<!--                <entry key="english" value="85"/>-->
<!--            </map>-->
<!--        </constructor-arg>-->
<!--    </bean>-->
<!--    <bean id="user11" class="SpringTest.SpringDemo3.remli.domain.User"/>-->

<!--    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
<!--        &lt;!&ndash;set方法注入参数&ndash;&gt;-->
<!--        &lt;!&ndash;这里的名称是java里面的首字母小写&ndash;&gt;-->
<!--        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"></property>-->
<!--        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/SpringTest.SpringDemo3.remli?useSSL=false&amp;serverTimezone=UTC"></property>-->
<!--        <property name="user" value="root"></property>-->
<!--        <property name="password" value="lixiaofeng"></property>-->
<!--    </bean>-->

<!--    &lt;!&ndash;解耦合&ndash;&gt;-->
<!--    &lt;!&ndash;这个地方可以更换数据源&ndash;&gt;-->
<!--    &lt;!&ndash;加载外部properties配置文件&ndash;&gt;-->
<!--    <context:property-placeholder location="classpath:jdbc.properties"/>-->

<!--    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">-->
<!--        &lt;!&ndash;set方法注入参数&ndash;&gt;-->
<!--        <property name="driverClassName" value="${jdbc.driver}"/>-->
<!--        <property name="url" value="${jdbc.url}" />-->
<!--        <property name="username" value="${jdbc.username}"/>-->
<!--        <property name="password" value="${jdbc.password}"/>-->
<!--    </bean>-->


</beans>

