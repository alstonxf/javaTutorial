<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">


<!--    <bean id="userDao" class="com.remli.dao.impl.UserDaoImpl" scope="prototype"></bean>-->
<!--    4、bean实例化：无参、工厂静态、工厂实例-->
    <!--    1.无参构造方法实例化：默认-->
    <!--找无参构造方法-->
    <bean id="userDao"  class="com.remli.dao.impl.UserDaoImpl" init-method="init" destroy-method="destroy" scope="prototype"></bean>

    <!--    2.工厂静态方法实例化：直接调用方法-->
    <!--找全包名对应内部指定的方法、去返回对应的对象-->
    <bean id="userDao1"  class="com.remli.factory.StaticFactory" scope="prototype" factory-method="getUserDao"></bean>

    <!--    3.工厂实例方法实例化：先有工厂对象再调方法-->
    <!--先创建工厂对象-->
    <bean id="factory"  class="com.remli.factory.DynamicFactory" scope="prototype" ></bean>
    <!--从容器当中工厂对象内部的方法获取指定返回的对象-->
    <bean id="userDao2"  factory-bean="factory" factory-method="getUserDao"></bean>


<!--    5、依赖注入DI：注入类型：对象、普通数据、集合数据-->
<!--        1.构造方法注入：有参构造-->
    <bean id="userService"  class="com.remli.service.impl.UserServiceImpl">
        <!--参数名-->            <!---->
        <constructor-arg name="userDao" ref="userDao"></constructor-arg>
    </bean>

    <!--    2.set方法注入：-->
    <!--找无参构造方法-->
<!--    <bean id="userDao"  class="com.remli.dao.impl.UserDaoImpl" init-method="init" destroy-method="destroy" scope="prototype"></bean>-->
    <!--set依赖注入-->
<!--    <bean id="userService"  class="com.remli.service.impl.UserServiceImpl">-->
<!--        <property name="userDao" ref="userDao"></property>-->
<!--    </bean>-->


<!--    3.p命名空间注入：(本质set)-->
<!--    1引入p命名空间：-->
<!--    xmlns:p="http://www.springframework.org/schema/p"-->
<!--    2修改注入方式：-->
<!--    <bean id="userService"  class="com.remli.service.impl.UserServiceImpl" p:userDao-ref="userDao" />-->

<!--    6、依赖注入类型：引用数据(对象)、普通数据、集合数据-->
    <!--    1.普通数据-->

    <bean id="userDao11"  class="com.remli.dao.impl.UserDaoImpl" >
        <!--属性注入-->
        <property name="username" value="注意空格"/>
        <property name="age" value="2021825"/>
    </bean>
<!--    2.引用数据-->
<!--    3.集合数据-->
    <bean id="userDao222"  class="com.remli.dao.impl.UserDaoImpl" >
        <!--属性注入-->
        <property name="strList">
            <list>
                <value>任</value>
                <value>明</value>
                <value>任</value>
            </list>
        </property>
        <property name="userMap">
            <map><!--key value-->
                <entry key="key1" value-ref="user11"> </entry>
                <entry key="key2" value-ref="user22"> </entry>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="1">111</prop>
                <prop key="2">1112</prop>
                <prop key="3">1113</prop>
            </props>
        </property>
    </bean>

    <bean id="user11" class="com.remli.domain.User">
        <property name="name" value="我是"></property>
        <property name="addr" value="中国"></property>
    </bean>
    <bean id="user22" class="com.remli.domain.User">
        <property name="name" value="我是1"></property>
        <property name="addr" value="中国1"></property>
    </bean>

</beans>
